// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId // we need to write the id for each model in a combination of Prisma and MongoDB syntax
  name String
  image String? // question mark in the end means optional value
  email String? @unique // @unique means the value of this field has to be unique
  emailVerified DateTime? // when the email was verified
  hashedPassword String? // if we use Google for authentication we are not going to have the hashed password
  createdAt DateTime @default(now()) // everytime we create a user model we are going to use the current timestamp from prisma
  updatedAt DateTime @updatedAt // prisma will handle the update checks and track the update time with @updatedAt flag
  favouriteIds String[] @db.ObjectId // it's a list of liked movie. it's gonna be an array of movie ids
  sessions Session[] // session type is imported from session model
  accounts Account[] // account type is imported from account model
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String // Auth provider such as email-password or google or github etc
  providerAccountId String
  refresh_token String? @db.String // token assigned by the auth provider
  access_token String? @db.String // token assigned by the auth provider
  expires_at Int? // prisma boilerplate
  token_type String?
  scope String? // user permission
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // here we are creating relation between the user model and the account model via their "userId" and "id" fields
  // "onDelete: Cascade" is a prisma function that says as the account model is linked to the user model so any instance in the account model must get deleted whenever its corresponding user model instance gets deleted

  @@unique([provider, providerAccountId]) // making each provider id unique so that no one can create multiple accounts with the same google id or github id
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique // this is a field for NextAuth
  userId String @db.ObjectId // this is a field for NextAuth
  expires DateTime // this is a field for NextAuth

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // syncing the session model with the user model
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier, token])
}

model Movie {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  videoUrl String
  thumbnailUrl String
  genre String
  duration String
}